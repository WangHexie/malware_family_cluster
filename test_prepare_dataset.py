from unittest import TestCase

from prepare_dataset import *


class TestPrepareDataSet(TestCase):
    def test_get_outside_train_features(self):
        train_data, label, test_data = get_outside_train_features()
        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 30000)
        self.assertEqual(test_data.shape[0], 15000)

    def test_load_ft_features(self):
        train_data, label, test_data = load_ft_features()
        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 30000)
        self.assertEqual(test_data.shape[0], 15000)

    def test_load_nn_features(self):
        train_data, label, test_data = load_nn_features()
        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 30000)
        self.assertEqual(test_data.shape[0], 15000)

    def test_load_depth_three_features(self):
        train_data, label, test_data = load_depth_three_features()

        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 30000)
        self.assertEqual(test_data.shape[0], 15000)

    def test_load_tfidf_features(self):
        train_data, label, test_data = load_tfidf_features("")
        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 30000)
        self.assertEqual(test_data.shape[0], 15000)

        train_data, label, test_data = load_tfidf_features("_hkey")
        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 21154)
        self.assertEqual(test_data.shape[0], 10661)

        train_data, label, test_data = load_tfidf_features("_dll")
        print(train_data.shape)
        print(test_data.shape)

        self.assertEqual(train_data.shape[0], 29990)
        self.assertEqual(test_data.shape[0], 14989)



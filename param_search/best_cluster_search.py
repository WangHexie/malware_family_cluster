from basic_function import save_dict
from param_search_cluster import connect_params, train_cluster


def search():
    base_parameter = {"data_type": 0, "dimension_reduction": 0}

    top_search = {"n_clusters": [380, 400, 420, 440, 460, 480]}

    cluster_ways = [0]
    cluster_parameter = {0: [{"linkage": 0}]}

    full_parameter = []
    scores_list = []
    for key in top_search.keys():
        for i in range(len(top_search[key])):
            full_parameter.append({key:top_search[key][i]})
            for cluster_way in cluster_ways:
                full_parameter.append({"cluster_way":cluster_way})
                for cp in cluster_parameter[cluster_way]:
                    full_parameter.append(cp)
                    real_full = [base_parameter] + full_parameter
                    print("params:", connect_params(real_full))
                    scores = train_cluster(**connect_params(real_full))
                    scores_list.append([connect_params(real_full)] + scores)
                    full_parameter.pop(-1)
                full_parameter.pop(-1)
            full_parameter.pop(-1)

    print(scores_list)

    save_dict(scores_list, "search_b.txt")

    for i in range(3):  # length of evaluation ways
        print(sorted(scores_list, key=lambda x:x[i+1]))


if __name__ == '__main__':
    search()
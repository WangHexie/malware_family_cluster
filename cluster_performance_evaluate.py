import argparse

from sklearn import metrics

from prepare_dataset import load_stage2_tf_idf
import pandas as pd


def evaluate_cluster_performance(X, labels):
    sc = metrics.silhouette_score(X, labels, metric='euclidean')
    chs = metrics.calinski_harabaz_score(X, labels)
    dbs = metrics.davies_bouldin_score(X, labels)
    print("silhouette_score:", sc)
    print("calinski_harabaz_score:", chs)
    print("davies_bouldin_score:", dbs)
    return [sc, chs, dbs]


if __name__ == '__main__':
    parser = argparse.ArgumentParser("cluster", fromfile_prefix_chars='@')
    parser.add_argument('-n', '--class_file', type=str, help='class_file path')

    args = parser.parse_args()

    train_data = load_stage2_tf_idf("")
    labels = pd.read_csv(args.class_file)
    full = pd.merge(train_data, labels, "left", left_on="file_name", right_on="id")

    labels = full["family_id"]
    # full.drop(columns=["family_id", "id"], inplace=True)
    train_data.drop(columns=["file_name"], inplace=True)

    evaluate_cluster_performance(train_data, labels)
import os
import xml.etree.ElementTree as ET
from datetime import datetime

import pandas as pd

from basic_function import make_dir


def get_file_list_in_dir(path):
    return [name for name in os.listdir(path) if not os.path.isdir(os.path.join(path, name))]


def save_file_info(path, csv_name):
    file = get_file_list_in_dir(path=path)
    print("file number:", len(file))
    file_data = []
    for i in range(len(file)):
        if i % 200 == 0:
            print("percent:", i / len(file) * 100)
        file_name = file[i]
        root = ET.parse(os.path.join(path, file_name)).getroot()

        file_list_node = root.findall('file_list')[0]

        file_error = int(file_list_node.get('file_error'))
        file_name = file_list_node.get('file_name')
        file_uid = file_list_node.get('file_uid')

        file_data.append([file_error, file_name, file_uid])

    file_data_df = pd.DataFrame(data=file_data, columns=['file_error', 'file_name', 'file_uid'])
    file_data_df.to_csv(csv_name)


def save_action_data_to_csv(action_data, csv_name, columns=None):
    if columns is None:
        action_data_df = pd.DataFrame(data=action_data,
                                      columns=['file_name', 'api_name', 'call_name', 'call_pid', 'ret_value',
                                               'apiArg_list_count',
                                               'exInfo_list_count', 'call_time'])
        action_data_df.to_csv(csv_name)
    else:
        action_data_df = pd.DataFrame(data=action_data, columns=columns)
        action_data_df.to_csv(csv_name)


def time_string_to_ns(time_string):
    time_format = '%H:%M:%S.%f'
    datetime_object = datetime.strptime(time_string, time_format)
    return (datetime_object - datetime(1970, 1, 1)).total_seconds()


def is_dll(name):
    return name[-3:] == "dll" or name[-3:] == "DLL"


def is_hkey(name):
    return name[:4] == "HKEY"


def save_action_stream(path, csv_name, dir_name="", mode=0):
    if dir_name != "":
        make_dir(os.path.join("features", dir_name))
    file = get_file_list_in_dir(path=path)
    print("file number:", len(file))
    action_data = []
    for i in range(len(file)):
        if i % 200 == 0:
            print("percent:", i / len(file) * 100)

        if i % 1000 == 0 and mode == 1 and i != 0:
            save_action_data_to_csv(action_data, os.path.join("features", dir_name, str(i) + csv_name))
            action_data = []

        file_name = file[i]
        root = ET.parse(os.path.join(path, file_name)).getroot()

        action_list = root.findall('./file_list/file/start_boot/action_list/action')
        start = 0
        start_time = 0
        last = 0
        for action in action_list:
            api_name = action.get('api_name')
            call_name = action.get('call_name')
            call_pid = action.get('call_pid')
            call_time = action.get('call_time')
            ret_value = action.get('ret_value')

            # convert time string to seconds since software start
            try:
                call_time = time_string_to_ns(call_time)
                last = call_time
            except ValueError:
                print(call_time)
                call_time = last

            if start == 0:
                start_time = call_time
                start += 1

            call_time = call_time - start_time

            try:
                apiArg_list = action.findall('apiArg_list')[0]
                apiArg_list_count = apiArg_list.get('count')
            except IndexError:
                apiArg_list_count = -1
                print(action.attrib)

            exInfo_list = action.findall('exInfo_list')[0]
            exInfo_list_count = exInfo_list.get('count')

            action_data.append(
                [file_name, api_name, call_name, call_pid, ret_value, apiArg_list_count, exInfo_list_count, call_time])

    if mode == 1:
        save_action_data_to_csv(action_data, os.path.join("features", dir_name, 'final_' + csv_name))
    else:
        save_action_data_to_csv(action_data, csv_name)


def save_attribute_list(path, csv_name, dir_name="", mode=0, dll_or_hkey="dll"):
    if dir_name != "":
        make_dir(os.path.join("features", dir_name))
    file = get_file_list_in_dir(path=path)
    print("file number:", len(file))
    column_name = ['file_name', 'api_name', 'call_name', 'call_pid', 'ret_value', 'value', "call_time"]
    determination = is_hkey
    if dll_or_hkey == "dll":
        determination = is_dll
    elif dll_or_hkey == "hkey":
        determination = is_hkey

    action_data = []
    for i in range(len(file)):
        if i % 200 == 0:
            print("percent:", i / len(file) * 100)

        if i % 1000 == 0 and mode == 1 and i != 0:
            save_action_data_to_csv(action_data, os.path.join("features", dir_name, str(i) + csv_name), column_name)
            action_data = []

        file_name = file[i]
        root = ET.parse(os.path.join(path, file_name)).getroot()

        action_list = root.findall('./file_list/file/start_boot/action_list/action')
        for action in action_list:

            api_name = action.get('api_name')
            call_name = action.get('call_name')
            call_pid = action.get('call_pid')
            call_time = action.get('call_time')
            ret_value = action.get('ret_value')

            apiArg_list = action.findall("./apiArg_list/apiArg")
            exInfo_list = action.findall('./exInfo_list/exInfo')

            for apiArg in apiArg_list:
                value = apiArg.get('value')
                # print(value)

                if determination(value):
                    print(1)
                    action_data.append(
                        [file_name, api_name, call_name, call_pid, ret_value, value, call_time])

            for exInfo in exInfo_list:
                value = exInfo.get('value')
                # print(value)
                if determination(value):
                    action_data.append(
                        [file_name, api_name, call_name, call_pid, ret_value, value, call_time])

    if mode == 1:
        save_action_data_to_csv(action_data, os.path.join("features", dir_name, 'final_' + csv_name), column_name)
    else:
        save_action_data_to_csv(action_data, csv_name, column_name)


if __name__ == '__main__':
    save_action_stream('stage2_dataset', "stage2.csv", dir_name="stage2", mode=1)

    save_attribute_list('stage2_dataset', "stage2.csv",
                        dir_name="stage2_dll", mode=1, dll_or_hkey="dll")

    save_attribute_list('stage2_dataset', "stage2.csv",
                        dir_name="stage2_hkey", mode=1, dll_or_hkey="hkey")

    # save_action_stream('stage1_dataset\\test', "test.csv", dir_name="test", mode=1)
    # save_action_stream('stage1_dataset\\train\\white', "white.csv", dir_name="white",
    #                    mode=1)
    # save_action_stream('stage1_dataset\\stage1_dataset\\train\\black', "black.csv", dir_name="black",
    #                    mode=1)

    # save_attribute_list('stage1_dataset\\stage1_dataset\\train\\white', "white.csv",
    #                     dir_name="white_dll", mode=1, dll_or_hkey="dll")
    # save_attribute_list('stage1_dataset\\stage1_dataset\\train\\black', "black.csv",
    #                     dir_name="black_dll", mode=1, dll_or_hkey="dll")
    # save_attribute_list('stage1_dataset\\stage1_dataset\\test', "test.csv",
    #                     dir_name="test_dll", mode=1, dll_or_hkey="dll")
    #
    # save_attribute_list('stage1_dataset\\stage1_dataset\\train\\white', "white.csv",
    #                     dir_name="white_hkey", mode=1, dll_or_hkey="hkey")
    # save_attribute_list('stage1_dataset\\stage1_dataset\\train\\black', "black.csv",
    #                     dir_name="black_hkey", mode=1, dll_or_hkey="hkey")
    # save_attribute_list('stage1_dataset\\stage1_dataset\\test', "test.csv",
    #                     dir_name="test_hkey", mode=1, dll_or_hkey="hkey")
